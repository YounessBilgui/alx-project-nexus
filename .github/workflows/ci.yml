name: CI Pipeline - ALX Project Nexus

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Code Quality & Testing
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django

    - name: Set up environment variables
      run: |
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        cd backend
        python manage.py migrate --noinput

    - name: Run tests with coverage
      run: |
        cd backend
        coverage run --source='.' manage.py test ../tests/
        coverage report --fail-under=75
        coverage xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 2: Code Linting & Formatting
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety

    - name: Run Black code formatting check
      run: |
        black --check --diff backend/ tests/

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff backend/ tests/

    - name: Run Flake8 linting
      run: |
        flake8 backend/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run Bandit security linting
      run: |
        bandit -r backend/ -ll || true

    - name: Run Safety dependency security check
      run: |
        safety check || true

  # Job 3: Security Analysis
  security:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        config-file: ./.github/codeql/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  # Job 4: Build Verification (Docker Build Test)
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test build only)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: alx-project-nexus:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm alx-project-nexus:ci-test python --version

  # Job 5: Integration Tests (if needed)
  integration:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d --build
        sleep 30

    - name: Run integration tests
      run: |
        # Wait for services to be ready
        docker-compose exec -T web python manage.py migrate
        # Run any integration tests here
        echo "Integration tests would run here"

    - name: Stop services
      run: |
        docker-compose down
